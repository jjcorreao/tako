{"name":"Tako","tagline":"タコ (Tako) is a image processing workflow engine for high-performance computing","body":"\r\nタコ (Tako)\r\n===\r\nTako is a image processing workflow engine for high-performance computing\r\n\r\nWhat it does!\r\n---\r\nTako reduces the complexity of high-performance image processing by abstracting the software-stack and the data-management layer, allowing complex workflows to happen with very little effort involved. This is possible by having \r\na workflow engine and a common data format between stages, one stage's output can be the next stage's input.\r\n \r\n*i.e.* A workflow that requires the sequence **image alignment>correction>segmentation>visualization** can be written \r\nin `tako` like this:\r\n\r\n  - `examples/big_workflow.py`\r\n\r\n```\r\n#!python\r\n    # Import tako.arms\r\n    from tako.arms.alignment import Alignment\r\n    from tako.arms.correction import Correction\r\n    from tako.arms.segmentation import Segmentation\r\n    from tako.arms.visualization import Visualization\r\n    from tako.head import head\r\n```\r\n\r\n  - Define each stage with a dictionary `setup`\r\n  \r\n```\r\n#!python\r\n    # Alignment block\r\n    alignment = Alignment(setup={\"algorithm\": \"sift\",\r\n                   \"data\": \"examples/data/data.raw\",\r\n                   \"params\": {\"fnum\": 10,\r\n                              \"sigma\": 0.001}})\r\n```\r\n\r\n```\r\n#!python\r\n    # Correction block\r\n    correction = Correction(setup = {setup={\"algorithm\": \"drift-correction\",\r\n                       \"data\": alignment.output(),\r\n                       \"params\": {\"elastic\": -0.2})\r\n```\r\n\r\n```\r\n#!python\r\n    # Segmentation block\r\n    segmentation = Segmentation(setup = {\"algorithm\": \"mean-shift\",\r\n                       \"data\": correction.output(),\r\n                       \"params\": {\"sigma\": 0.1,\r\n                                  \"epsilon\": 0.01}})\r\n```\r\n\r\n```\r\n#!python\r\n    # Visualization block\r\n    visualization = Visualization(setup = {\"algorithm\": \"3d-render\",\r\n                       \"data\": segmentation.output(),\r\n                       \"params\": {\"res\": 100})\r\n```\r\n\r\n```\r\n#!python\r\n    # Execution block\r\n    head.do_workflow.inputs(inputs=[alignment, correction, segmentation, visualization])\r\n```\r\n\r\nTako and ImageJ\r\n---\r\nTako also allows you to integrate ImageJ macros and plugins into your workflows.\r\n\r\n*i.e.* Edge detection using ImageJ's `run(\"Find Edges\");` method. \r\n\r\n`examples/imagej_macro.py`\r\n```\r\n#!python\r\n    from tako.arms.correction import Correction\r\n    from tako.head import head\r\n    \r\n    correction = Correction(setup={\"algorithm\": \"ijmacro\",\r\n                       \"data\": \"examples/data/Lenna.png\",\r\n                       \"params\": {'macro': \"tako/bin/correction/imagej-macro.ijm\"}\r\n                       })\r\n    \r\n    do = head.do_workflow(setup=[correction])\r\n```\r\n\r\n`bin/correction/imagej-macro_template.ijm`\r\n```\r\n#!java\r\n    args = getArgument;\r\n    args = split(args,\":\");\r\n\r\n    img=args[0];\r\n    output=args[1];\r\n    \r\n    setBatchMode(true);\r\n    open(img);\r\n    \r\n    // START ImageJ macro\r\n    run(\"Find Edges\");\r\n    // END ImageJ macro\r\n    \r\n    saveAs(\"Tiff\", output);\r\n    close();\r\n```\r\n\r\nArchitecture\r\n---\r\nタコ (Tako) has two main components, `tako.arms` where the workflows are templated, and `tako.head` where the workflow engine [[Tigres]] manages arm assignments.\r\n\r\nCredits\r\n---\r\n\r\n  - Joaquin Correa\r\n  - Tigres team\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}