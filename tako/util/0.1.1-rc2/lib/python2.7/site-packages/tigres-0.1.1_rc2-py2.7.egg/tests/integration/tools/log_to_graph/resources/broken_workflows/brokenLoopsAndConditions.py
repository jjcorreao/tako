import os
import sys

from tigres import *
from tigres.utils import Execution, State, TigresException

"""
unichr range: 65 to 122 (inclusive)
"""
BASE = 65
MAX = 122

"""
Main program (iteratively invokes Parallel template, while checking for condition)
Goes through 10 iterations before condition is met; then a merge is performed on the output 
"""
def main(execution):
    start(name="BrokenLoopsAndConditions", log_dest=os.path.splitext(__file__)[0] + '.log', execution=execution)
    set_log_level(Level.DEBUG)

    message = 'abcde'
    result = ''
    target = 'defgh'
    print("++++++++++++++++++++++++++++")
    print("Initial Message:")
    print(message)
    print("++++++++++++++++++++++++++++")

    input_array = InputArray("Intial inputs", [])
    for c in message:
        input_array.append([c])

    i = 0

    try:
        while ''.join(result) != target:
            if i == 2:
                task_raise = Task("Broken parallel task", EXECUTABLE, impl_name='divide_by_zero.sh', input_types=[chr])
            else:
                task_raise = Task("Raise letters {}".format(i), FUNCTION, impl_name=raiseLetter, input_types=[chr])
            task_array = TaskArray('Letter-raising Tasks', tasks=[task_raise])

            result = parallel('Letter-raising iteration', task_array, input_array)

            task_check = check('task', names=[task_raise.name], state=State.FAIL)
            assert (not task_check)

            input_array = InputArray("Coded Values", [])  # implicit usage of PREVIOUS for next iteration
            i += 1

        task_identity = Task("Do nothing", FUNCTION, impl_name=lambda x: x, input_types=[str])
        task_array = TaskArray('Decoding Tasks', tasks=[task_identity])
        output = merge('Fast Decoding', task_array, input_array=None,
                       merge_task=Task("To String", FUNCTION, impl_name=lambda x: ''.join(x)), merge_input_values=None)
    except TigresException as e:
        print(e)

    dot_execution()

    print("FAILED TASKS:\n")
    fail_records, done_records = check('task', state=State.FAIL), check('task', state=State.DONE)
    if fail_records:
        for status in check('task', state=State.FAIL):
            print("{}\n".format(status))
    print("DONE TASKS:\n")
    if done_records:
        for status in check('task', state=State.DONE):
            print("{}\n".format(status))

    end()


""" Increments ordinal value of input char """
def raiseLetter(char):
    if isinstance(char, int):
        ordinal = char
    else:
        ordinal = ord(str(char))
    ordinal += 1
    return chr(ordinal)


if __name__ == "__main__":
    if len(sys.argv) <= 1:
        print("Usage: {} ({})>".format(sys.argv[0],
                                       "|".join(Execution.LOOKUP.keys())))
        exit()
    main(Execution.get(sys.argv[1]))
