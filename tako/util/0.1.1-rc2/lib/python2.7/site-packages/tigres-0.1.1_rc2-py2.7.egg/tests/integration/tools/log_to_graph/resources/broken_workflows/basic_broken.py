from tigres import *
from tigres.utils import Execution, State, TigresException
import os

EXEC_MODE = 'EXECUTION_LOCAL_THREAD'
THIS_DIR = os.path.dirname(__file__)
NORMAL_TASK = os.path.join(THIS_DIR, 'normal_task.sh')
DIVIDE_BY_ZERO = os.path.join(THIS_DIR, 'divide_by_zero.sh')
PRINT_NUMBERS = os.path.join(THIS_DIR, 'printNumbers.shs')


def runBrokenSequence():
    start(name="BrokenSequence", log_dest=os.path.splitext(__file__)[0] + '.log', execution=Execution.get(EXEC_MODE))

    all_tasks = TaskArray("All tasks")
    all_tasks.append(Task("normal task 1", EXECUTABLE, impl_name=NORMAL_TASK))
    all_tasks.append(Task("normal task 2", EXECUTABLE, impl_name=NORMAL_TASK))
    all_tasks.append(Task("broken task", EXECUTABLE, impl_name=DIVIDE_BY_ZERO))
    all_tasks.append(Task("normal task 3", EXECUTABLE, impl_name=NORMAL_TASK))
    all_tasks_inputs = InputArray("Broken Sequence inputs", [])
    for i in range(4):
        all_tasks_inputs.append(InputValues("number", [i]))
    all_tasks_inputs[2] = InputValues()  # 3rd task takes no input
    try:
        output = sequence('run broken sequence', all_tasks,
                          all_tasks_inputs)
    except TigresException as e:
        print(e)

    dot_execution()
    print("FAILED TASKS:\n")
    fail_records, done_records = check('task', state=State.FAIL), check('task', state=State.DONE)
    if fail_records:
        for status in check('task', state=State.FAIL):
            print("{}\n".format(status))
    print("DONE TASKS:\n")
    if done_records:
        for status in check('task', state=State.DONE):
            print("{}\n".format(status))


def runSingleBrokenParallel():
    start(name="BrokenParallel", log_dest=os.path.splitext(__file__)[0] + '.log', execution=Execution.get(EXEC_MODE))

    all_tasks = TaskArray("All tasks")
    all_tasks.append(Task("normal task 1", EXECUTABLE, impl_name=NORMAL_TASK))
    all_tasks.append(Task("normal task 2", EXECUTABLE, impl_name=NORMAL_TASK))
    all_tasks.append(Task("broken task", EXECUTABLE, impl_name=DIVIDE_BY_ZERO))
    all_tasks.append(Task("normal task 3", EXECUTABLE, impl_name=NORMAL_TASK))
    all_tasks_inputs = InputArray("Broken Parallel inputs", [])
    for i in range(4):
        all_tasks_inputs.append(InputValues("number", [i]))
    all_tasks_inputs[2] = InputValues()  # 3rd task takes no input
    try:
        output = parallel('run single broken parallel', all_tasks,
                          all_tasks_inputs)
    except TigresException as e:
        print(e)

    dot_execution()
    print("FAILED TASKS:\n")
    fail_records, done_records = check('task', state=State.FAIL), check('task', state=State.DONE)
    if fail_records:
        for status in check('task', state=State.FAIL):
            print("{}\n".format(status))
    print("DONE TASKS:\n")
    if done_records:
        for status in check('task', state=State.DONE):
            print("{}\n".format(status))


def runMultipleBrokenParallel():
    start(name="MultipleBrokenParallel", log_dest=os.path.splitext(__file__)[0] + '.log',
          execution=Execution.get(EXEC_MODE))

    all_tasks = TaskArray("All tasks")
    all_tasks.append(Task("normal task 1", EXECUTABLE, impl_name=NORMAL_TASK))
    all_tasks.append(Task("normal task 2", EXECUTABLE, impl_name=NORMAL_TASK))
    all_tasks.append(Task("broken task", EXECUTABLE, impl_name=DIVIDE_BY_ZERO))
    all_tasks.append(Task("broken task", EXECUTABLE, impl_name=DIVIDE_BY_ZERO))
    all_tasks_inputs = InputArray("Broken Parallel inputs", [])
    for i in range(2):
        all_tasks_inputs.append(InputValues("number", [i]))
    for j in range(2, 4):
        all_tasks_inputs.append(InputValues())
    try:
        output = parallel('run multiple broken parallel', all_tasks,
                          all_tasks_inputs)
    except TigresException as e:
        print(e)

    dot_execution()
    print("FAILED TASKS:\n")
    fail_records, done_records = check('task', state=State.FAIL), check('task', state=State.DONE)
    if fail_records:
        for status in check('task', state=State.FAIL):
            print("{}\n".format(status))
    print("DONE TASKS:\n")
    if done_records:
        for status in check('task', state=State.DONE):
            print("{}\n".format(status))


def runBrokenAfterSplit():
    start(name="BrokenAfterSplit", log_dest=os.path.splitext(__file__)[0] + '.log', execution=Execution.get(EXEC_MODE))
    broken_split = Task("BROKEN SPLIT", FUNCTION, impl_name=lambda x: str(x), input_types=[int])
    broken_split_input = InputValues("number", [123])
    after_split_tasks = TaskArray("After split")
    after_split_tasks.append(Task("normal task 1", EXECUTABLE, impl_name=NORMAL_TASK))
    after_split_tasks.append(Task("broken task", EXECUTABLE, impl_name=DIVIDE_BY_ZERO, input_types=[str]))
    after_split_tasks.append(Task("normal task 2", EXECUTABLE, impl_name=NORMAL_TASK))

    try:
        output = split('Run BrokenAfterSplit', broken_split, broken_split_input, after_split_tasks,
                       InputArray("Iterable", []))
    except TigresException as e:
        print(e)

    dot_execution()

    print("FAILED TASKS:\n")
    fail_records, done_records = check('task', state=State.FAIL), check('task', state=State.DONE)
    if fail_records:
        for status in check('task', state=State.FAIL):
            print("{}\n".format(status))
    print("DONE TASKS:\n")
    if done_records:
        for status in check('task', state=State.DONE):
            print("{}\n".format(status))


def runBrokenAfterSplit_Exec():
    start(name="BrokenAfterSplit_Exec", log_dest=os.path.splitext(__file__)[0] + '.log',
          execution=Execution.get(EXEC_MODE))
    broken_split = Task("BROKEN SPLIT", EXECUTABLE, impl_name=PRINT_NUMBERS)
    broken_split_input = InputValues([])
    after_split_tasks = TaskArray("After split")
    after_split_tasks.append(Task("normal task 1", EXECUTABLE, impl_name=NORMAL_TASK, input_types=[str]))
    after_split_tasks.append(Task("broken task", EXECUTABLE, impl_name=DIVIDE_BY_ZERO, input_types=[str]))
    after_split_tasks.append(Task("normal task 2", EXECUTABLE, impl_name=NORMAL_TASK, input_types=[str]))

    try:
        output = split('Run "BrokenAfterSplit"', broken_split, broken_split_input, after_split_tasks,
                       InputArray("Iterable", []))
    except TigresException as e:
        print(e)

    dot_execution()

    print("FAILED TASKS:\n")
    fail_records, done_records = check('task', state=State.FAIL), check('task', state=State.DONE)
    if fail_records:
        for status in check('task', state=State.FAIL):
            print("{}\n".format(status))
    print("DONE TASKS:\n")
    if done_records:
        for status in check('task', state=State.DONE):
            print("{}\n".format(status))


def runBrokenSplitTask():
    start(name="BrokenSplitTask", log_dest=os.path.splitext(__file__)[0] + '.log', execution=Execution.get(EXEC_MODE))
    broken_split = Task("BROKEN SPLIT TASK", EXECUTABLE, impl_name=DIVIDE_BY_ZERO)
    broken_split_input = InputValues('filler input', ['blah'])
    after_split_tasks = TaskArray("After split")
    after_split_tasks.append(Task("normal task 1", EXECUTABLE, impl_name=NORMAL_TASK, input_types=[str]))
    after_split_tasks.append(Task("normal task 2", EXECUTABLE, impl_name=NORMAL_TASK, input_types=[str]))

    try:
        output = split('Run BrokenSplitTask', broken_split, broken_split_input, after_split_tasks,
                       InputArray("Iterable", []))
    except TigresException as e:
        print(e)

    dot_execution()

    print("FAILED TASKS:\n")
    fail_records, done_records = check('task', state=State.FAIL), check('task', state=State.DONE)
    if fail_records:
        for status in check('task', state=State.FAIL):
            print("{}\n".format(status))
    print("DONE TASKS:\n")
    if done_records:
        for status in check('task', state=State.DONE):
            print("{}\n".format(status))

""" Not targeted in tests--needs fix """
def runBrokenMergeParallelTask():
    start(name="BrokenMergeParallelTask", log_dest=os.path.splitext(__file__)[0] + '.log',
          execution=Execution.get(EXEC_MODE))
    broken_task = Task("BROKEN parallel task", EXECUTABLE, impl_name=DIVIDE_BY_ZERO)
    merge_task = Task("Merge task", FUNCTION, impl_name=merge_inputs, input_types=[str])
    parallel_inputs = InputArray("parallel inputs",
                                 [InputValues([]), InputValues("num1", [1]), InputValues("num2", [2])])
    parallel_tasks = TaskArray("Before merge")
    parallel_tasks.append(broken_task)
    parallel_tasks.append(Task("normal task 1", EXECUTABLE, impl_name=NORMAL_TASK, input_types=[int]))
    parallel_tasks.append(Task("normal task 2", EXECUTABLE, impl_name=NORMAL_TASK, input_types=[int]))

    try:
        output = merge('Run BrokenMergeParallelTask', parallel_tasks, parallel_inputs, merge_task)
    except TigresException as e:
        print(e)

    dot_execution()

    print("FAILED TASKS:\n")
    fail_records, done_records = check('task', state=State.FAIL), check('task', state=State.DONE)
    if fail_records:
        for status in check('task', state=State.FAIL):
            print("{}\n".format(status))
    print("DONE TASKS:\n")
    if done_records:
        for status in check('task', state=State.DONE):
            print("{}\n".format(status))


def runBrokenMergeTask():
    start(name="BrokenMergeTask", log_dest=os.path.splitext(__file__)[0] + '.log', execution=Execution.get(EXEC_MODE))
    broken_merge_task = Task("BROKEN merge task", EXECUTABLE, impl_name=DIVIDE_BY_ZERO, input_types=[str])
    parallel_inputs = InputArray("parallel inputs",
                                 [InputValues("num1", [1]), InputValues("num2", [2]), InputValues("num3", [3])])
    parallel_tasks = TaskArray("Before merge")
    parallel_tasks.append(Task("normal task 1", EXECUTABLE, impl_name=NORMAL_TASK, input_types=[int]))
    parallel_tasks.append(Task("normal task 2", EXECUTABLE, impl_name=NORMAL_TASK, input_types=[int]))
    parallel_tasks.append(Task("normal task 3", EXECUTABLE, impl_name=NORMAL_TASK, input_types=[int]))

    try:
        output = merge('Run BrokenMergeParallelTask', parallel_tasks, parallel_inputs, broken_merge_task)
    except TigresException as e:
        print(e)

    dot_execution()

    print("FAILED TASKS:\n")
    fail_records, done_records = check('task', state=State.FAIL), check('task', state=State.DONE)
    if fail_records:
        for status in check('task', state=State.FAIL):
            print("{}\n".format(status))
    print("DONE TASKS:\n")
    if done_records:
        for status in check('task', state=State.DONE):
            print("{}\n".format(status))


def merge_inputs(inputs):
    merged = ""
    for s in inputs:
        merged += str(s)
    return merged


if __name__ == "__main__":
    """ Uncomment tests to run them """
    # runBrokenSequence()
    #runSingleBrokenParallel()
    #runMultipleBrokenParallel()
    #runBrokenAfterSplit()
    #runBrokenAfterSplit_Exec()
    #runBrokenSplitTask()
    #runBrokenMergeParallelTask()
    runBrokenMergeTask()