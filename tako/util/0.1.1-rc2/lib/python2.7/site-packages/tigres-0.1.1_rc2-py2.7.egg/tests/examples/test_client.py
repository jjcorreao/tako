import multiprocessing
from multiprocessing.managers import SyncManager

try:
    import queue
except ImportError:
    import Queue

    queue = Queue
import pickle

IP = 'localhost'
PORTNUM = 55444
AUTHKEY = 'shufflin'


def make_client_manager(ip, port, authkey):
    class ServerQueueManager(SyncManager):
        pass

    ServerQueueManager.register('get_job_q')
    ServerQueueManager.register('get_result_q')

    manager = ServerQueueManager(address=(ip, port), authkey=authkey)
    manager.connect()

    print(('Client connected to %s:%s' % (ip, port)))
    return manager


def worker(job_q, result_q):
    myname = multiprocessing.current_process().name
    while True:
        try:
            job = job_q.get_nowait()
            #print '%s got %s nums...' % (myname, len(job))

            fn = pickle.loads(job[0])
            b = fn(*job[1:])
            result_q.put(b)
            #print '  %s done' % myname
        except queue.Empty:
            return


def mp_worker(shared_job_q, shared_result_q, nprocs):
    procs = []
    for i in range(nprocs):
        p = multiprocessing.Process(
            target=worker,
            args=(shared_job_q, shared_result_q))
        procs.append(p)
        p.start()

    for p in procs:
        p.join()


def runclient():
    manager = make_client_manager(IP, PORTNUM, AUTHKEY)
    job_q = manager.get_job_q()
    result_q = manager.get_result_q()

    mp_worker(job_q, result_q, multiprocessing.cpu_count())


if __name__ == '__main__':
    runclient()

