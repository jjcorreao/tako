import glob
import os
from tigres import *
from tigres.utils import Execution

__author__ = 'val'

import unittest


def get_env(*args):

    values = []
    for a in args:
        if a in os.environ:
            log_info("get_env", message=a)
            values.append(os.environ[a])
    return values


class TestCaseExecutionEnvironment(unittest.TestCase):

    def tearDown(self):
        end()
        for logfile in glob.glob('tigres*.log'):
            os.remove(logfile)

    def run_sequence_function(self, execution):
        start(name="My Environment", env={'foo': 'bar', 'one': '1'}, execution=execution)
        # Define input types for Task
        task_types = InputTypes("Single Task Types", [str, str])
        # Define inputs for Task
        task_values = InputValues("Single Task Values", ['foo', 'two'])
        # Define Task
        task = Task("Single Task", FUNCTION, get_env, task_types)
        # Create a task array containing Task
        task_array = TaskArray("Sequence TaskArray", [task, ])
        # Create an input array to feed to Task
        input_array = InputArray("Sequence InputArray", [task_values])
        # Invoke the template
        output = sequence("Sequence Single Task", task_array, input_array, {'foo': 'baz', 'two': '2'})
        print(output)
        assert output == ['baz', '2']
        end()

    def run_sequence_executable(self, execution):
        start(name="My Environment", env={'foo': 'bar', 'one': '1'}, execution=execution)
        # Define input types for Task
        task_types = InputTypes("Single Task Types", [str])
        # Define inputs for Task
        task_values = InputValues("Single Task Values", ['$foo','$two'])
        # Define Task
        task = Task("Single Task", EXECUTABLE, "echo", task_types)
        # Create a task array containing Task
        task_array = TaskArray("Sequence TaskArray", [task, ])
        # Create an input array to feed to Task
        input_array = InputArray("Sequence InputArray", [task_values])
        # Invoke the template
        output = sequence("Sequence Single Task", task_array, input_array, {'foo': 'baz', 'two': '2'})
        assert output == 'baz 2'
        end()

    def run_parallel(self, execution):
        start(name="My Environment", env={'foo': 'bar', 'one': '1'}, execution=execution)
        # Define input types for Task
        task_types = InputTypes("Single Task Types", [str, str])
        # Define inputs for Task
        task_values = InputValues("Single Task Values", ['$foo','$two'])
        # Define Task
        task = Task("Single Task", EXECUTABLE, "echo", task_types)
        # Define input types for Task
        task_types2 = InputTypes("Single Task Types", [str, str])
        # Define inputs for Task
        task_values2 = InputValues("Single Task Values", ['foo', 'two'])
        # Define Task
        task2 = Task("Single Task", FUNCTION, get_env, task_types2)

        # Create a task array containing Task
        task_array = TaskArray("Sequence TaskArray", [task, task2])
        # Create an input array to feed to Task
        input_array = InputArray("Sequence InputArray", [task_values,task_values2])
        # Invoke the template
        output = parallel("Parallel Single Task", task_array, input_array, env={'foo': 'baz', 'two': '2'})
        print(("output", output))
        assert output == ['baz 2', ['baz', '2']]

        check_status = check('template',multiple=False)
        for status in check_status:
            self.assertEqual("DONE",status.state,"Execution({}) - '{}' should have status of DONE".format(execution, status.name))
        end()

    def test_function_environment(self):

        self.run_sequence_function(Execution.LOCAL_THREAD)

        self.run_sequence_function(Execution.LOCAL_PROCESS)

        self.run_sequence_function(Execution.DISTRIBUTE_PROCESS)

    def test_executable_environment(self):

        self.run_sequence_executable(Execution.LOCAL_THREAD)

        self.run_sequence_executable(Execution.LOCAL_PROCESS)

        self.run_sequence_executable(Execution.DISTRIBUTE_PROCESS)

    def test_parallel(self):

        self.run_parallel(Execution.LOCAL_THREAD)

        self.run_parallel(Execution.LOCAL_PROCESS)

        self.run_parallel(Execution.DISTRIBUTE_PROCESS)




if __name__ == '__main__':
    unittest.main()
