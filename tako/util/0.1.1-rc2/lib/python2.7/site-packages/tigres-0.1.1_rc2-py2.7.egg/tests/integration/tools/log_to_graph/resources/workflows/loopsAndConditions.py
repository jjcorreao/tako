"""
Workflow: iteratively run parallel-steps, until certain output is achieved. Then, break out of loop, and merge result. 
Tests iteration & conditions 
"""

import os
import sys

from tigres import *
from tigres.utils import Execution, State, TigresException

"""
unichr range: 65 to 122 (inclusive)
"""
BASE = 65
MAX = 122

"""
Main program (iteratively invokes Parallel template, while checking for condition)
Goes through 10 iterations before condition is met; then a merge is performed on the output 
"""


def main(execution):
    start(name="LoopsAndConditions", log_dest=os.path.splitext(__file__)[0] + '.log', execution=execution)
    set_log_level(Level.DEBUG)

    message = 'abcde'
    result = ''
    target = 'defgh'
    print("++++++++++++++++++++++++++++")
    print("Initial Message:")
    print(message)
    print("++++++++++++++++++++++++++++")

    input_array = InputArray("Intial inputs", [])
    for c in message:
        input_array.append([c])

    i = 0
    while ''.join(result) != target:
        task_raise = Task("Raise letters {}".format(i), FUNCTION, impl_name=raiseLetter, input_types=[chr])
        task_array = TaskArray('Letter-raising Tasks', tasks=[task_raise])

        result = parallel('Letter-raising iteration', task_array, input_array)

        task_check = check('task', names=[task_raise.name], state=State.FAIL)
        assert (not task_check)

        input_array = InputArray("Coded Values", [])  # implicit usage of PREVIOUS for next iteration
        i += 1
        # dot_execution()
        "Merge result into a string"
    task_identity = Task("Do nothing", FUNCTION, impl_name=lambda x: x, input_types=[str])
    task_array = TaskArray('Decoding Tasks', tasks=[task_identity])
    output = merge('Fast Decoding', task_array, input_array=None,
                   merge_task=Task("To String", FUNCTION, impl_name=lambda x: ''.join(x), input_types=[str]),
                   merge_input_values=None)
    dot_execution()
    end()

    print("\n++++++++++++++++++++++++++++")
    print("Final Output:")
    print(output)
    print("++++++++++++++++++++++++++++\n")


""" Increments ordinal value of input char """


def raiseLetter(char):
    if isinstance(char, int):
        ordinal = char
    else:
        ordinal = ord(str(char))
    ordinal += 1
    return chr(ordinal)


if __name__ == "__main__":
    # Simple Usage Here
    if len(sys.argv) <= 1:
        print("Usage: {} ({})>".format(sys.argv[0],
                                       "|".join(Execution.LOOKUP.keys())))
        exit()
    try:
        main(Execution.get(sys.argv[1]))
    except TigresException as e:
        print(e)
        # Search for all the failed tasks
        task_check = check('task', state=State.FAIL)