'''
Created on Mar 5, 2013

@author: val
'''
import glob
import unittest

from tigres import InputArray, InputTypes, InputValues, Task, TaskArray, FUNCTION, EXECUTABLE, end


TEST_OUTPUT_DIR = './output'

class TestTypes(unittest.TestCase):
    def setUp(self):

        import os
        if not os.path.exists(TEST_OUTPUT_DIR):
            os.makedirs(TEST_OUTPUT_DIR)

    def tearDown(self):

        import os
        import shutil
        if os.path.exists(TEST_OUTPUT_DIR):
            shutil.rmtree(TEST_OUTPUT_DIR)

        end()
        for logfile in glob.glob("tigres*.log"):
            os.unlink(logfile)



    def testInputTypes(self):
        """
        Test the InputTypes object for valid string representation
        """

        class Object_a:
            def read(self): pass

        task1_types = InputTypes("Task1Types", [Object_a, int])

        self.assertEqual("Task1Types", task1_types.name)
        self.assertEqual(2, len(task1_types))


    def testTaskFunctionObj(self):
        class Object_a:
            def read(self): pass

        task1_types = InputTypes("Task1Types", [Object_a, int])
        task1 = Task("Task1", FUNCTION, pow, task1_types)

        self.assertEqual("Task1Types", task1_types.name)
        self.assertEqual(2, len(task1_types))
        self.assertEqual("Task1", task1.name)
        self.assertEqual(pow, task1.impl_name)
        self.assertEqual(FUNCTION, task1.task_type)
        self.assertEqual(task1_types, task1.input_types)

    def testTaskValidateFunction(self):


        import tigres
        task1_types = InputTypes("Task1Types", [])
        self.assertRaises(ValueError, Task, "Task1", FUNCTION, tigres.sequence, task1_types)


    def testInputValues(self):
        "Test something about input values."
        input_vals = InputValues("myvals", [1, 'hello world'])
        self.assertEqual("myvals", input_vals.name)

        mydict = eval(repr(input_vals))
        self.assertTrue(isinstance(mydict, dict))

    def testTaskArray(self):
        input_type_1 = InputTypes("task1_input", [int, str])
        task1 = Task("task1", FUNCTION, pow, input_type_1, )
        input_type_2 = InputTypes("task2_input", [str])
        task2 = Task("task2", EXECUTABLE, "/bin/myx", input_type_2)
        task_array_1 = TaskArray("mytasks", [task1, task2])

        self.assertEqual("mytasks", task_array_1.name)

        mydict = eval(repr(task_array_1))
        self.assertTrue(isinstance(mydict, dict))

    def testInputArray(self):
        input_array = InputArray("input_array1", [InputValues("values", [1, 'hello world'])])
        self.assertEqual(repr(input_array), """{'name':'input_array1', 'unique_name':'input_array1' }""")


if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.test']
    unittest.main()