"""
Unit tests for runtime execution graph file (.dot) generation

created on 2013-05-20 by Gilberto Pastorello <gzpastorello@lbl.gov>
"""
try:
    xrange
    range = xrange
except NameError:
    pass
import unittest
from datetime import datetime

import mock

import tigres


class TestGraph(unittest.TestCase):


    def setUp(self):
        pass

    def tearDown(self):
        """Remove generated dot files"""
        import os
        import glob
        for logfile in glob.glob("Graph*.dot"):
            os.unlink(logfile)



    def notest_generate_graph(self):
        """
            Tests runtime graph file generation providing all the parameters at init() and calling finalize()
        """
         
        base = '/tmp/graph_tests_init_all_{}{}.{}'
        ts = datetime.now().strftime('%Y-%m-%dT%H-%M-%S-%f')
         
        workflow_name = 'Graph Test (init all dot files)'
        log_name = base.format(ts, '', 'log' )
        full_name = base.format(ts, '_full', 'dot' )
        exec_name = base.format(ts, '_exec', 'dot' )
        data_name = base.format(ts, '_data', 'dot' )
         
        tigres.init(name=workflow_name,
                    log_dest=log_name,
                    dot_full_filename=full_name,
                    dot_exec_filename=exec_name,
                    dot_data_filename=data_name,
                    dot_data_include_nodep=False)
         
        nelems = 15
         
        seq_task_array = []
        par_task_array = []
        split_task_array = []
        merge_task_array = []
        input_array = []
        for i in range(nelems):
            m = mock.MagicMock()
            m.name = 'seq_{}'.format(i)
            m.state = ('WAIT' if i==(nelems-1) else 'DONE')
            m.oid_tg = id(m)
            m.execute.return_value = i
            seq_task_array.append(m)
             
            m = mock.MagicMock()
            m.name = 'par_{}'.format(i)
            m.state = ('DONE' if i%2==0 else ('FAIL' if i%3==0 else 'WAIT'))
            m.oid_tg = id(m)
            m.execute.return_value = i
            par_task_array.append(m)
             
            m = mock.MagicMock()
            m.name = 'spl_{}'.format(i)
            m.state = ('DONE' if i%2==0 else ('FAIL' if i%3==0 else 'WAIT'))
            m.oid_tg = id(m)
            m.execute.return_value = i
            split_task_array.append(m)
             
            m = mock.MagicMock()
            m.name = 'mer_{}'.format(i)
            m.state = ('DONE' if i%2==0 else ('FAIL' if i%3==0 else 'WAIT'))
            m.oid_tg = id(m)
            m.execute.return_value = i
            merge_task_array.append(m)
             
            input_array.append([])
         
        # Sequence
        seq_task_array = tigres.TaskArray('Seq Array', seq_task_array)
        seq_result = tigres.sequence("Seq Graph Test", seq_task_array, input_array)
         
        # Split
        split_task_array = tigres.TaskArray('Split Array', split_task_array)
        m = mock.MagicMock()
        m.name = 'Split Task'
        m.state = 'DONE'
        m.oid_tg = id(m)
        m.execute.return_value = 'split'
        split_task = m
        split_result_list = tigres.split("Split Graph Test", split_task, [], split_task_array, input_array)
         
        # Parallel
        par_task_array = tigres.TaskArray('Par Array', par_task_array)
        par_result_list = tigres.parallel("Par Graph Test", par_task_array, input_array)
         
        # Merge
        merge_task_array = tigres.TaskArray('Merge Array', merge_task_array)
        m = mock.MagicMock()
        m.name = 'Merge Task'
        m.state = 'WAIT'
        m.oid_tg = id(m)
        m.execute.return_value = 'merge'
        merge_task = m
        merge_result = tigres.merge("Merge Graph Test", merge_task_array, input_array, merge_task, [])
 
        self.assertEqual(nelems-1, seq_result)
        self.assertItemsEqual([n for n in range(nelems)], split_result_list)
        self.assertItemsEqual([n for n in range(nelems)], par_result_list)
        self.assertEqual('merge', merge_result)
 
        tigres.finalize()
 
    def notest_generate_graph_single_graph(self):
        """
            Tests runtime graph file generation providing one filename at init() and calling finalize()
        """
         
        base = '/tmp/graph_tests_init_single_{}{}.{}'
        ts = datetime.now().strftime('%Y-%m-%dT%H-%M-%S-%f')
         
        workflow_name = 'Graph Test (init single dot file)'
        log_name = base.format(ts, '', 'log' )
        exec_name = base.format(ts, '_exec', 'dot' )
         
        tigres.init(name=workflow_name,
                    log_dest=log_name,
                    dot_exec_filename=exec_name,)
         
        nelems = 15
         
        seq_task_array = []
        par_task_array = []
        split_task_array = []
        merge_task_array = []
        input_array = []
        for i in range(nelems):
            m = mock.MagicMock()
            m.name = 'seq_{}'.format(i)
            m.state = ('WAIT' if i==(nelems-1) else 'DONE')
            m.oid_tg = id(m)
            m.execute.return_value = i
            seq_task_array.append(m)
             
            m = mock.MagicMock()
            m.name = 'par_{}'.format(i)
            m.state = ('DONE' if i%2==0 else ('FAIL' if i%3==0 else 'WAIT'))
            m.oid_tg = id(m)
            m.execute.return_value = i
            par_task_array.append(m)
             
            m = mock.MagicMock()
            m.name = 'spl_{}'.format(i)
            m.state = ('DONE' if i%2==0 else ('FAIL' if i%3==0 else 'WAIT'))
            m.oid_tg = id(m)
            m.execute.return_value = i
            split_task_array.append(m)
             
            m = mock.MagicMock()
            m.name = 'mer_{}'.format(i)
            m.state = ('DONE' if i%2==0 else ('FAIL' if i%3==0 else 'WAIT'))
            m.oid_tg = id(m)
            m.execute.return_value = i
            merge_task_array.append(m)
             
            input_array.append([])
         
        # Sequence
        seq_task_array = tigres.TaskArray('Seq Array', seq_task_array)
        seq_result = tigres.sequence("Seq Graph Test", seq_task_array, input_array)
         
        # Split
        split_task_array = tigres.TaskArray('Split Array', split_task_array)
        m = mock.MagicMock()
        m.name = 'Split Task'
        m.state = 'DONE'
        m.oid_tg = id(m)
        m.execute.return_value = 'split'
        split_task = m
        split_result_list = tigres.split("Split Graph Test", split_task, [], split_task_array, input_array)
         
        # Parallel
        par_task_array = tigres.TaskArray('Par Array', par_task_array)
        par_result_list = tigres.parallel("Par Graph Test", par_task_array, input_array)
         
        # Merge
        merge_task_array = tigres.TaskArray('Merge Array', merge_task_array)
        m = mock.MagicMock()
        m.name = 'Merge Task'
        m.state = 'WAIT'
        m.oid_tg = id(m)
        m.execute.return_value = 'merge'
        merge_task = m
        merge_result = tigres.merge("Merge Graph Test", merge_task_array, input_array, merge_task, [])
 
        self.assertEqual(nelems-1, seq_result)
        self.assertItemsEqual([n for n in range(nelems)], split_result_list)
        self.assertItemsEqual([n for n in range(nelems)], par_result_list)
        self.assertEqual('merge', merge_result)
 
        tigres.finalize()
        
    def notest_generate_graph_default_names(self):
        """
            Tests runtime graph file generation providing only which graphs should be generated at init() and calling finalize()
        """
        
        base = '/tmp/graph_tests_init_all_{}{}.{}'
        ts = datetime.now().strftime('%Y-%m-%dT%H-%M-%S-%f')
        
        workflow_name = 'Graph Test (init all dot files)'
        log_name = base.format(ts, '', 'log' )
        
        tigres.init(name=workflow_name,
                    log_dest=log_name,
                    dot_gen_full=False,
                    dot_gen_exec=True,
                    dot_gen_data=False,
                    dot_data_include_nodep=False)
        
        nelems = 15
        
        seq_task_array = []
        par_task_array = []
        split_task_array = []
        merge_task_array = []
        input_array = []
        for i in range(nelems):
            m = mock.MagicMock()
            m.name = 'seq_{}'.format(i)
            m.state = ('WAIT' if i==(nelems-1) else 'DONE')
            m.oid_tg = id(m)
            m.execute.return_value = i
            seq_task_array.append(m)
            
            m = mock.MagicMock()
            m.name = 'par_{}'.format(i)
            m.state = ('DONE' if i%2==0 else ('FAIL' if i%3==0 else 'WAIT'))
            m.oid_tg = id(m)
            m.execute.return_value = i
            par_task_array.append(m)
            
            m = mock.MagicMock()
            m.name = 'spl_{}'.format(i)
            m.state = ('DONE' if i%2==0 else ('FAIL' if i%3==0 else 'WAIT'))
            m.oid_tg = id(m)
            m.execute.return_value = i
            split_task_array.append(m)
            
            m = mock.MagicMock()
            m.name = 'mer_{}'.format(i)
            m.state = ('DONE' if i%2==0 else ('FAIL' if i%3==0 else 'WAIT'))
            m.oid_tg = id(m)
            m.execute.return_value = i
            merge_task_array.append(m)
            
            input_array.append([])
        
        # Sequence
        seq_task_array = tigres.TaskArray('Seq Array', seq_task_array)
        seq_result = tigres.sequence("Seq Graph Test", seq_task_array, input_array)
        
        # Split
        split_task_array = tigres.TaskArray('Split Array', split_task_array)
        m = mock.MagicMock()
        m.name = 'Split Task'
        m.state = 'DONE'
        m.oid_tg = id(m)
        m.execute.return_value = 'split'
        split_task = m
        split_result_list = tigres.split("Split Graph Test", split_task, [], split_task_array, input_array )
        
        # Parallel
        par_task_array = tigres.TaskArray('Par Array', par_task_array)
        par_result_list = tigres.parallel("Par Graph Test", par_task_array, input_array)
        
        # Merge
        merge_task_array = tigres.TaskArray('Merge Array', merge_task_array)
        m = mock.MagicMock()
        m.name = 'Merge Task'
        m.state = 'WAIT'
        m.oid_tg = id(m)
        m.execute.return_value = 'merge'
        merge_task = m
        merge_result = tigres.merge("Merge Graph Test", merge_task_array, input_array, merge_task, [])

        self.assertEqual(nelems-1, seq_result)
        self.assertItemsEqual([n for n in range(nelems)], split_result_list)
        self.assertItemsEqual([n for n in range(nelems)], par_result_list)
        self.assertEqual('merge', merge_result)

        tigres.finalize()

if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()