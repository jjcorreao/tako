import glob
import os
from tigres import end
from tigres.core.previous import PreviousSyntaxError, PREVIOUS

__author__ = 'val'

import unittest


class TestTigresCoreState(unittest.TestCase):
    def tearDown(self):

        end()

        for logfile in glob.glob("tigres*.log"):
            os.unlink(logfile)

    def test_previous_syntax(self):

        a = PREVIOUS.task_name

        self.assertTrue(isinstance(a, PREVIOUS))
        self.assertEquals("task_name", a._work_name)

        a = PREVIOUS.i

        self.assertTrue(isinstance(a, PREVIOUS))
        self.assertEquals(True, a._i)

        a = PREVIOUS.task_name.i

        self.assertTrue(isinstance(a, PREVIOUS))
        self.assertEquals("task_name", a._work_name)
        self.assertEquals(True, a._i)

        error = None
        try:
            PREVIOUS.i.i
        except Exception as e:
            error = e

        assert error
        assert isinstance(error, PreviousSyntaxError)

        error = None
        try:
            PREVIOUS.foo.i.i
        except Exception as e:
            error = e

        assert error
        assert isinstance(error, PreviousSyntaxError)

        error = None
        try:
            PREVIOUS.foo.foo
        except Exception as e:
            error = e

        assert error
        assert isinstance(error, PreviousSyntaxError)

        try:
            PREVIOUS[5]
        except Exception as e:
            error = e

        assert error

        try:
            PREVIOUS.foo[5]
        except Exception as e:
            error = e

        assert error
        assert isinstance(error, PreviousSyntaxError)

        a = PREVIOUS.foo.i[6]
        self.assertEquals("foo", a._work_name)
        self.assertEquals(True, a._i)
        self.assertEquals(6, a._index)

        a = PREVIOUS.i[6]
        self.assertEquals(None, a._work_name)
        self.assertEquals(True, a._i)
        self.assertEquals(6, a._index)


if __name__ == '__main__':
    unittest.main()
