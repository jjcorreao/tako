import glob
import subprocess
import unittest
from testfixtures import OutputCapture
import tigres
from tigres.utils import Execution, TigresException
import tigres.core.tools.log


class TestLogToDoBrokenMerge(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        """ Remove intermediate files """
        import os

        tigres.end()
        for logfile in glob.glob("{}/*.log".format(os.getcwd())):
            os.unlink(logfile)

        for dot in glob.glob("{}/*.dot".format(os.getcwd())):
            os.unlink(dot)


    def test_broken_merge_parallel_task(self):
        """testing broken parallel merge task!\n"""
        runBrokenMergeParallelTask()
        # Format the Workflow Graph
        ref_dot_str, _ = subprocess.Popen(["nop", "BrokenMergeParallelTask.dot"], stdout=subprocess.PIPE).communicate()

        # Run the graph tool
        pipe_graph = subprocess.Popen(
            ['python', tigres.core.tools.log.__file__, 'graph', "BrokenMergeParallelTask.log"],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # Format the output with nop
        pipe_nop = subprocess.Popen(["nop"], stdin=pipe_graph.stderr, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        log_dot_str, _ = pipe_nop.communicate()

        with OutputCapture() as ocapture:
            print(log_dot_str.decode())

        ocapture.compare(ref_dot_str.decode())


def runBrokenMergeParallelTask():
    """
    Example workflow for issue
    """
    tigres.start(name="BrokenMergeParallelTask", log_dest='BrokenMergeParallelTask.log',
                 execution=Execution.get("EXECUTION_LOCAL_THREAD"))
    broken_task = tigres.Task("BROKEN parallel task", tigres.FUNCTION, impl_name=lambda x: x / 0, input_types=[int])
    merge_task = tigres.Task("Merge task", tigres.FUNCTION, impl_name=lambda nums: sum(nums), input_types=[list])
    parallel_inputs = tigres.InputArray("parallel inputs",
                                        [tigres.InputValues("num1", [1]), tigres.InputValues("num2", [2]),
                                         tigres.InputValues("num3", [3])])
    parallel_tasks = tigres.TaskArray("Before merge")
    parallel_tasks.append(broken_task)
    parallel_tasks.append(tigres.Task("normal task 1", tigres.FUNCTION, impl_name=lambda x: x, input_types=[int]))
    parallel_tasks.append(tigres.Task("normal task 2", tigres.FUNCTION, impl_name=lambda x: x, input_types=[int]))

    try:
        output = tigres.merge('Run BrokenMergeParallelTask', parallel_tasks, parallel_inputs, merge_task)
    except TigresException as e:
        pass

    tigres.dot_execution()


if __name__ == "__main__":
    unittest.main()