from __future__ import print_function
import os
from testfixtures import OutputCapture

__author__ = 'val'

import unittest
import tigres.core.tools.log as tlog


class TestToolsLogGraph(unittest.TestCase):
    def test_graph_template(self):
        """Graph a Tigres log file, format with nop and compare to expected"""

        dir = os.path.dirname(os.path.abspath(__file__))
        log_file = '{}/test.log'.format(dir)
        dot_file = '{}/graph.dot'.format(dir)

        # Get the expected graph output
        with open(dot_file, "r") as myfile:
            expected = ''.join(myfile.readlines())


        from subprocess import Popen, PIPE
        pipe_graph = Popen(['python', tlog.__file__, 'graph', log_file, ], stdin=PIPE, stdout=PIPE, stderr=PIPE)
        pipe_nop = Popen('nop', stdin=pipe_graph.stderr, stdout=PIPE, stderr=PIPE)
        output, err = pipe_nop.communicate()

        with OutputCapture() as ocapture:
            print(output.decode())

        ocapture.compare(expected)



if __name__ == '__main__':
    unittest.main()
