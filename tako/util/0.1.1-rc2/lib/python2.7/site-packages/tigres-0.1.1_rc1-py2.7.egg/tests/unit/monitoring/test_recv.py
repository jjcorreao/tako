"""
Unit tests for monitoring socket receiver
"""
try:
    xrange
    range = xrange
except NameError:
    pass
import glob
import os

from tigres.core.monitoring import receive, end


__author__ = 'dang'

import socket
import threading
import time
import unittest
import logging

#from tigres import template, type

hndlr = logging.StreamHandler()
hndlr.setLevel(logging.ERROR)
logging.getLogger("tigres").addHandler(hndlr)

LOCALHOST = 'localhost'


class BaseTC(unittest.TestCase):
    pass


class DataRcv(receive.Observer):
    def __init__(self):
        self.rec = []

    def update(self, data):
        self.rec.append(data)


class ReportRcv(receive.Observer):
    def __init__(self):
        self.total = 0
        self.last = None

    def update(self, report):
        self.total += report.total_bytes
        self.last = report.cur_bytes


class ServerTest(BaseTC):
    record = "sample record {:03d}\n"
    port = 54321

    def setUp(self):
        self.server = receive.TCPServer(self.port)
        self.sthr = threading.Thread(target=self.server_loop, args=[])
        self.sthr.start()

    def tearDown(self):
        self.server.handle_close()
        self.sthr.join(5)

        end()


    def server_loop(self):
        self.server.run()

    def send(self, n):
        client = socket.create_connection((LOCALHOST, self.port), timeout=2)
        for i in range(n):
            msg = self.record.format(i)
            client.send(msg.encode('utf-8'))
        client.close()
        time.sleep(1)   # wait for msg to arrive

    def test_basic(self):
        "Receive a message"
        dr = DataRcv()
        self.server.attach(dr, datatype=str)
        self.send(1)
        self.assertEqual(len(dr.rec), 1)
        self.assertEqual(dr.rec[0], self.record.format(0))

    def test_reporter(self):
        "Reporting of received messages"
        n = 100
        msg_size1 = len(self.record.format(0))
        msg_size2 = len(self.record.format(10))
        total_size = 10 * msg_size1 + 90 * msg_size2
        reporter = receive.Reporter(total_size - 1)
        rr = ReportRcv()
        reporter.attach(rr)
        self.server.attach(reporter, datatype=int)
        self.send(n)
        # first and only report is whole batch
        self.assertEqual(total_size, rr.total)
        self.assertEqual(total_size, rr.last)

    def test_many(self):
        "Test send/receive of a larger number of messages"
        rpt_interval = 100
        dr = DataRcv()
        self.server.attach(dr, datatype=str)
        reporter = receive.Reporter(rpt_interval)
        rr = ReportRcv()
        reporter.attach(rr)
        self.server.attach(reporter, datatype=int)
        n = 1000
        recsz = len(self.record.format(0))
        actual_bytes = n * recsz
        self.send(n)
        # all data should have arrived
        self.assertEqual(len(dr.rec), n)
        self.assertEqual(dr.rec[0], self.record.format(0))
        self.assertEqual(dr.rec[999], self.record.format(999))
        self.assertLessEqual(actual_bytes, rr.total)


if __name__ == '__main__':
    unittest.main()
    for logfile in glob.glob("tigres*.log"):
        os.unlink(logfile)
