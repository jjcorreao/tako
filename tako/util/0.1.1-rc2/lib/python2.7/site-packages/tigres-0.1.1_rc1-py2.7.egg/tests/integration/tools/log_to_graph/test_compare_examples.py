"""
7/2/14 by James Fox
"""

import os
import subprocess
import unittest
import glob
from testfixtures import OutputCapture
import tigres
import tigres.core.tools.log

"""
Tests require graphviz installed
"""
DOT_EXEC_CMD = "python {} EXECUTION_LOCAL_THREAD"
LOG_TO_DOT_CMD = "python {} graph {} -o {}"


class Test(unittest.TestCase):

    """ Sets up paths """

    def setUp(self):
        file_dir_name = os.path.dirname(os.path.realpath(__file__))
        self.workflows_path = os.path.join(file_dir_name, 'resources/workflows')
        self.files_to_remove = []  # intermediate files to remove (each test is responsible for adding files to this list)

    def tearDown(self):
        """
        Remove intermediate files
        """
        for file in self.files_to_remove:
            os.remove(file)

    def generate_dot_outputs(self, py_file, intmd_reg_dot_file, log_file, addt_pyfile_args=None):

        py_file = os.path.join(self.workflows_path, py_file)
        cmd = DOT_EXEC_CMD.format(py_file).split(" ")
        if addt_pyfile_args:
            cmd.extend(addt_pyfile_args)
        subprocess.call(cmd)

        # ####

        # Format the Workflow Graph
        intmd_reg_dot = os.path.join(os.path.realpath(os.curdir), intmd_reg_dot_file)

        ref_dot_str, _ = subprocess.Popen(["nop", intmd_reg_dot], stdout=subprocess.PIPE).communicate()

        # Run the graph tool
        log_file = os.path.join(self.workflows_path, log_file)
        pipe_graph = subprocess.Popen(
            ['python', tigres.core.tools.log.__file__, 'graph', log_file],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        # Format the output with nop
        pipe_nop = subprocess.Popen(["nop"], stdin=pipe_graph.stderr, stdout=subprocess.PIPE)
        log_dot_str, _ = pipe_nop.communicate()

        with OutputCapture() as ocapture:
            print(log_dot_str.decode())

        # mark unnecessary files for removal
        self.files_to_remove.extend([intmd_reg_dot, log_file])

        ocapture.compare(ref_dot_str.decode())

        ########


    def test_single_sequence(self):
        """testing single sequence!"""
        self.generate_dot_outputs('hello_world_sequence.py', "HelloWorldSequence.dot", "hello_world_sequence.log")

    def test_single_parallel(self):
        """testing single parallel!"""
        self.generate_dot_outputs('hello_world_parallel.py', "HelloWorldParallel.dot", "hello_world_parallel.log")

    def test_split_merge(self):
        """testing split and merge!"""
        self.generate_dot_outputs('hello_world_split_merge.py', "HelloWorldSplitMerge.dot",
                                  "hello_world_split_merge.log", )

    def test_apply_shuffle_func(self):
        """testing apply_shuffle_func!"""
        self.generate_dot_outputs('apply_shuffle_func.py', "ApplyShuffleFunc.dot", "apply_shuffle_func.log")

    def test_apply_shuffle_exec(self):
        """testing apply_shuffle_exec!"""
        self.generate_dot_outputs('apply_shuffle_exec.py', "ApplyShuffleExec.dot", "apply_shuffle_exec.log")

    def test_loops_and_conditions(self):
        """testing loops and conditions!"""
        self.generate_dot_outputs('loopsAndConditions.py', "LoopsAndConditions.dot", "loopsAndConditions.log", )

if __name__ == "__main__":
    unittest.main()




