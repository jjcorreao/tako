"""
Base unit tests for Tigres API
"""
import time
from tigres.core.state.program import Program
from tigres.core.task import TigresObject

__author__ = 'Dan Gunter <dkgunter@lbl.gov>'

import glob
import os
import unittest



class BaseTC(unittest.TestCase):
    """Put shared testcase stuff here.
    """
    def setUp(self):
        Program().clear()   # make sure we are cleaned up from prev. tests

    def tearDown(self):
        """Remove generated log files"""
        Program().clear()
        for logfile in glob.glob("tigres*.log"):
            os.remove(logfile)

    class MyObj(TigresObject):
        pass


class TestCase1(BaseTC):

    def test_init_program_name(self):
        """init function and get_program_name"""
        program_name_orig = Program().name
        print(program_name_orig)
        self.assertNotEqual(program_name_orig, None)
        # should set program name
        time.sleep(1)
        Program().clear()
        program_name = Program().name
        print(program_name)
        self.assertNotEqual(program_name_orig, program_name)
        # this time, nothing should happen
        program_name2 = Program().name
        self.assertEqual(program_name2, program_name)

    def test_tigres_object(self):
        """tracked-object wrapper"""
        obj = BaseTC.MyObj("foo")
        self.assertTrue(hasattr(obj, 'tg_oid'))
        self.assertTrue(hasattr(obj, 'tg_attr'))
        self.assertTrue(hasattr(obj, 'tg_type'))
        self.assertEqual(len(obj.tg_attr), 3)
        obj.tg_attr['what'] = 'ever'
        self.assertEqual(obj.tg_attr['what'], 'ever')
        self.assertEqual(len(obj.tg_attr), 4)
        thing = BaseTC.MyObj("bar")
        self.assertNotEqual(obj.tg_oid, thing.tg_oid)

    def test_auto_init(self):
        """Test calling init() automatically with first call to get_program()
        """
        program_name = Program('NONE').name
        self.assertEqual(program_name, 'NONE')
        program1 = Program()
        program1_name = program1.name
        self.assertNotEqual(program1, None)
        self.assertEqual(program1_name, 'NONE')
        Program().clear()
        program2 = Program()
        program2_name = program2.name
        self.assertNotEqual(program2, None)
        self.assertNotEqual(program2_name, 'NONE')
        self.assertNotEqual(program1, program2)

if __name__ == '__main__':
    unittest.main()
