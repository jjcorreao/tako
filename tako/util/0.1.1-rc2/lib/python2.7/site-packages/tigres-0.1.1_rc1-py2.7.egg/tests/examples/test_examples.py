import glob
import os
import shutil
from tigres import end
from tigres.utils import Execution

__author__ = 'val'

import unittest


class TestExamples(unittest.TestCase):
    def setUp(self):
        end()
        self._cwd = os.path.split(__file__)[0]
        print("CWD",self._cwd)
        if not self._cwd:
            self._cwd = "."
        self._cwd_output = self._cwd + "/output"

        if os.path.exists(self._cwd_output):
            shutil.rmtree(self._cwd_output)
        os.mkdir(self._cwd_output)

        for f in ['task1impl', 'task2impl', 'data.csv']:
            shutil.copy(self._cwd + "/{}".format(f), self._cwd_output + "/{}".format(f))
        os.chdir(self._cwd_output)

    def tearDown(self):
        end()
        os.chdir(self._cwd)
        if os.path.exists(self._cwd_output):
            shutil.rmtree(self._cwd_output)
        for logfile in glob.glob("*.log"):
            os.unlink(logfile)

    def test_examples(self):
        """
        Run through all of the examples executing with three of the execution plugins
        :return:
        """

        from tests.examples import example_data_parallel
        from tests.examples import example_workflow_executable
        from tests.examples import example_workflow_function
        from tests.examples import example_workflow_function_composedmerge
        from tests.examples import example_workflow_function_composedsplit
        from tests.examples import example_workflow_function_implicit
        from tests.examples import example_workflow_function_loop
        from tests.examples import example_workflow_function_reuse

        for module in [example_data_parallel, example_workflow_function, example_workflow_executable,
                       example_workflow_function_composedmerge,
                       example_workflow_function_reuse, example_workflow_function_reuse,
                       example_workflow_function_composedsplit, example_workflow_function_implicit,
                       example_workflow_function_loop]:
            module.main(Execution.LOCAL_THREAD)
            end()
            module.main(Execution.LOCAL_PROCESS)
            end()
            if not os.name == 'nt':
                # FIXME: This doesn't state on windows
                module.main(Execution.DISTRIBUTE_PROCESS)
                end()


if __name__ == '__main__':
    unittest.main()
