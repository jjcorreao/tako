"""
created on 2013-06-11 by Gilberto Pastorello <gzpastorello@lbl.gov>
"""
try:
    xrange
    range = xrange
except NameError:
    pass
import glob
import unittest

from tigres import *
from tigres.core.previous import PreviousSyntaxError

TEST_OUTPUT_DIR = './output'


class Test(unittest.TestCase):
    def setUp(self):
        import os

        if not os.path.exists(TEST_OUTPUT_DIR):
            os.makedirs(TEST_OUTPUT_DIR)
        start("template_sequence_extra", './output/template_sequence_extra.log',
              prov_graph_filename='./output/template_sequence_extra.dot')

    def tearDown(self):

        import os
        import shutil

        end()
        if os.path.exists(TEST_OUTPUT_DIR):
            shutil.rmtree(TEST_OUTPUT_DIR, ignore_errors=True)

        for logfile in glob.glob("tigres*.log"):
            os.unlink(logfile)

    def test_previous_instantiation(self):

        self.assertRaises(PreviousSyntaxError, PREVIOUS)


    # Tests for SEQUENCE Template using PREVIOUS
    def test_seq_no_previous(self):
        """Test single task"""

        task_types = InputTypes("", [int])
        task_values = InputValues("", [1])
        task = Task("Single", FUNCTION, lambda x: x + 1, task_types, None)

        task_array = TaskArray("", [task, ])
        input_array = InputArray("", [task_values, ])

        output = sequence("", task_array, input_array)

        self.assertEqual(2, output)

    def test_seq_implicit_previous(self):
        """Test single task"""

        task1_types = InputTypes("", [])
        task1_values = InputValues("", [])
        task1 = Task("PREVIOUS instance 1", FUNCTION, lambda: 2, task1_types, None)

        task2_types = InputTypes("", [int])
        task2 = Task("PREVIOUS instance 2", FUNCTION, lambda x: x + 1, task2_types, None)

        task_array = TaskArray("", [task1, task2])
        input_array = InputArray("", [task1_values,])

        output = sequence("", task_array, input_array)

        self.assertEqual(3, output)

    def test_seq_implicit_previous_template_inputs(self):
        """Test single task no previous template inputs"""

        task1_types = InputTypes("", [])
        task1 = Task("PREVIOUS instance 1", FUNCTION, lambda: 2, task1_types, None)

        task2_types = InputTypes("", [int])
        task2 = Task("PREVIOUS instance 2", FUNCTION, lambda x: x + 1, task2_types, None)

        task_array = TaskArray("", [task1, task2])
        input_array = InputArray("", [])


        self.assertRaisesRegexp(ValueError, "previous", sequence, "", task_array, input_array)


    def test_seq_single_task_previous(self):
        """Test single task with PREVIOUS that doesn't exist. It should error"""

        task_types = InputTypes("", [int])
        task_values = InputValues("", [PREVIOUS])
        task = Task("Single PREVIOUS class", FUNCTION, lambda x: x + 1, task_types, None)

        task_array = TaskArray("", [task, ])
        input_array = InputArray("", [task_values, ])

        self.assertRaisesRegexp(ValueError, "previous", sequence, "", task_array, input_array)

    def test_seq_tasks_previous_instance(self):
        """Test task with PREVIOUS  of a specific task PREVIOUS.name"""

        task1_types = InputTypes("", [int])
        task1_values = InputValues("", [1])
        task1 = Task("PREVIOUS instance 1", FUNCTION, lambda x: x + 1, task1_types, None)

        task2_types = InputTypes("", [int])
        task2_values = InputValues("", [PREVIOUS.task1])
        task2 = Task("PREVIOUS instance 2", FUNCTION, lambda x: x + 1, task2_types, None)

        task_array = TaskArray("", [task1, task2])
        input_array = InputArray("", [task1_values, task2_values])

        output = sequence("", task_array, input_array)

        self.assertEqual(3, output)

    def test_seq_tasks_previous_class(self):
        """Test task with PREVIOUS"""
        task1_types = InputTypes("", [int])
        task1_values = InputValues("", [1])
        task1 = Task("PREVIOUS class 1", FUNCTION, lambda x: x + 1, task1_types, None)

        task2_types = InputTypes("", [int])
        task2_values = InputValues("", [PREVIOUS])
        task2 = Task("PREVIOUS class 2", FUNCTION, lambda x: x + 1, task2_types, None)

        task_array = TaskArray("", [task1, task2])
        input_array = InputArray("", [task1_values, task2_values])

        output = sequence("", task_array, input_array)

        self.assertEqual(3, output)

    def test_seq_tasks_previous_instance_i_n(self):
        """Test task with PREVIOUS.i instance and n-th element"""
        task1_types = InputTypes("", [int])
        task1_values = InputValues("", [1])
        task1 = Task("PREVIOUS instance i 1", FUNCTION, lambda x: [x, x + 1], task1_types, None)

        task2_types = InputTypes("", [int])
        task2_values = InputValues("", [PREVIOUS.task1.i[1]])
        task2 = Task("PREVIOUS instance i 2", FUNCTION, lambda x: x + 1, task2_types, None)

        task_array = TaskArray("", [task1, task2])
        input_array = InputArray("", [task1_values, task2_values])

        output = sequence("", task_array, input_array)

        self.assertEqual(3, output)


    def test_seq_tasks_previous_class_i_n(self):
        """Test task with PREVIOUS.i instance with n-th element but no source task"""
        task1_types = InputTypes("", [int])
        task1_values = InputValues("", [1])
        task1 = Task("PREVIOUS instance only i 1", FUNCTION, lambda x: [x, x + 1], task1_types, None)

        task2_types = InputTypes("", [int])
        task2_values = InputValues("", [PREVIOUS.i[1]])
        task2 = Task("PREVIOUS instance only i 2", FUNCTION, lambda x: x + 1, task2_types, None)

        task_array = TaskArray("", [task1, task2])
        input_array = InputArray("", [task1_values, task2_values])

        output = sequence("", task_array, input_array)

        self.assertEqual(3, output)

    def test_seq_previous_basic(self):
        """
        Test all four basic usages of PREVIOUS
        PREVIOUS, PREVIOUS.i, PREVIOUS.task, PREVIOUS.task.i
        """

        task1_types = InputTypes("Task1 Types", [int])
        task1_values = InputValues("Task1 Input", [1])
        task1 = Task("Task1", FUNCTION, lambda x: x + 1, task1_types, None)

        # PREVIOUS only
        task2_types = InputTypes("Task2 Types", [int])
        task2_values = InputValues("Task2 Input", [PREVIOUS])
        task2 = Task("Task2", FUNCTION, lambda x: (x, x + 1), task2_types, None)

        # PREVIOUS only element
        task3_types = InputTypes("Task3 Types", [int])
        task3_values = InputValues("Task3 Input", [PREVIOUS.i[1]])
        task3 = Task("Task3", FUNCTION, lambda x: x + 1, task3_types, None)

        # PREVIOUS specific task
        task4_types = InputTypes("Task4 Types", [int])
        task4_values = InputValues("Task4 Input", [PREVIOUS.task3])
        task4 = Task("Task4", FUNCTION, lambda x: (x, x + 1), task4_types, None)

        # PREVIOUS element from specific task
        task5_types = InputTypes("Task5 Types", [int, int])
        task5_values = InputValues("Task5 Input", [PREVIOUS.task4.i[1]])
        task5 = Task("Task5", FUNCTION, lambda x: x + 1, task5_types, None)

        task_array = TaskArray("Previous TaskArray", [task1, task2, task3, task4, task5])
        input_array = InputArray("Previous TaskArray",
                                 [task1_values, task2_values, task3_values, task4_values, task5_values])
        output = sequence("Previous Basic", task_array, input_array)

        self.assertEqual(6, output)


    # Tests for PARALLEL Template using PREVIOUS
    def test_par_no_prev(self):
        """Test tasks without PREVIOUS"""

        task_list, input_list, expected_output_list = [], [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Par_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)
            expected_output_list.append(i + 1)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output_list = parallel("", task_array, input_array)

        self.assertEqual(expected_output_list, output_list)

    def test_par_prev_implicit_error(self):
        """Test tasks with PREVIOUS implicit"""

        task_list, input_list = [], []
        for i in range(10):
            task_types = InputTypes("", [])
            task = Task("Par_{}".format(i), FUNCTION, lambda: 1, task_types, None)
            task_list.append(task)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        self.assertRaisesRegexp(ValueError, "missing PREVIOUS parallel task input", parallel, "", task_array, input_array)

    def test_par_prev_no_implicit(self):
        """Test tasks with PREVIOUS implicit"""

        task_list, input_list = [], []
        for i in range(10):
            task_types = InputTypes("", [])
            task = Task("Par_{}".format(i), FUNCTION, lambda: 1, task_types, None)
            task_list.append(task)
            input_list.append([])

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output = parallel("", task_array, input_array)
        self.assertEqual([1, 1, 1, 1, 1, 1, 1, 1, 1, 1],output)

    def test_par_prev_class_error(self):
        """Test tasks with PREVIOUS classes"""

        task_list, input_list = [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            if i % 2 == 0:
                task_values = InputValues("", [PREVIOUS])
            else:
                task_values = InputValues("", [i])
            task = Task("Par_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        self.assertRaisesRegexp(ValueError, "no previous", parallel, "", task_array, input_array)

    def test_par_prev_instance_i(self):
        """Test tasks with PREVIOUS instances with only indices
        """

        task_list, input_list = [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [PREVIOUS.i[i]])
            task = Task("Par_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        self.assertRaisesRegexp(ValueError, "previous", parallel, "", task_array, input_array)

    def test_par_prev_instance_task(self):
        """Test tasks with PREVIOUS instances with task (sequence, run before)
        """

        # Sequence tasks/template
        task_seq_types = InputTypes("", [int])
        task_seq_values = InputValues("", [1])
        task_seq = Task("Single", FUNCTION, lambda x: x + 1, task_seq_types, None)

        task_array = TaskArray("", [task_seq, ])
        input_array = InputArray("", [task_seq_values, ])

        output = sequence("", task_array, input_array)

        self.assertEqual(2, output)

        # Parallel tasks/template
        task_list, input_list, expected_output_list = [], [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            if i % 2 == 0:
                task_values = InputValues("", [PREVIOUS.task_seq])
                expected_output_list.append(3)
            else:
                task_values = InputValues("", [i])
                expected_output_list.append(i + 1)
            task = Task("Par_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output_list = parallel("", task_array, input_array)

        self.assertEqual(expected_output_list, output_list)

    def test_par_prev_instance_task_i_implicit_values(self):
        """Test tasks with PREVIOUS instances with task and index (sequence, run before)"""

        # Sequence tasks/template
        task_seq_types = InputTypes("", [int])
        task_seq_values = InputValues("", [1])
        task_seq = Task("Par First Task", FUNCTION, lambda x: (x, x + 1), task_seq_types, None)

        task_array = TaskArray("", [task_seq, ])
        input_array = InputArray("", [task_seq_values, ])

        output = sequence("", task_array, input_array)

        self.assertEqual((1, 2), output)

        # Parallel tasks/template
        task_list, input_list = [], []
        for i in range(2):
            task_types = InputTypes("", [int])
            task = Task("Par_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)

        # Only one input values, will be assumed that they will all be input values
        task_values = InputValues("", [PREVIOUS.task_seq.i])
        input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output_list = parallel("", task_array, input_array)

        self.assertEqual([2, 3], output_list)

        # Parallel tasks/template
        task_list, input_list = [], []
        for i in range(2):
            task_types = InputTypes("", [int])
            task = Task("Par_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)

        # Only one input values, it will be assumed that they will have all the input values.
        task_values = InputValues("", [PREVIOUS.i])
        input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output_list = parallel("", task_array, input_array)

        self.assertEqual([3, 4], output_list)

    def test_par_prev_instance_task_i_n_and_i(self):
        """Test tasks with PREVIOUS instances with task and index (sequence, run before)"""

        # Sequence tasks/template
        task_seq_types = InputTypes("", [int])
        task_seq_values = InputValues("", [1])
        task_seq = Task("Par First Task", FUNCTION, lambda x: (x, x + 1), task_seq_types, None)

        task_array = TaskArray("", [task_seq, ])
        input_array = InputArray("", [task_seq_values, ])

        output = sequence("", task_array, input_array)

        self.assertEqual((1, 2), output)

        # Parallel tasks/template
        task_list, input_list = [], []
        for i in range(2):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [PREVIOUS.task_seq.i])
            task = Task("Par_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output_list = parallel("", task_array, input_array)

        self.assertEqual([2, 3], output_list)

        # Parallel tasks/template
        task_list, input_list = [], []
        for i in range(2):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [PREVIOUS.i])
            task = Task("Par_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output_list = parallel("", task_array, input_array)

        self.assertEqual([3, 4], output_list)

    def test_par_prev_instance_task_i_n(self):
        """Test tasks with PREVIOUS instances with task and index (sequence, run before)"""

        # Sequence tasks/template
        task_seq_types = InputTypes("", [int])
        task_seq_values = InputValues("", [1])
        task_seq = Task("Par First Task", FUNCTION, lambda x: (x, x + 1), task_seq_types, None)

        task_array = TaskArray("", [task_seq, ])
        input_array = InputArray("", [task_seq_values, ])

        output = sequence("", task_array, input_array)

        self.assertEqual((1, 2), output)

        # Parallel tasks/template
        task_list, input_list, expected_output_list = [], [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            if i % 2 == 0:
                task_values = InputValues("", [PREVIOUS.task_seq.i[1]])
                expected_output_list.append(3)
            else:
                task_values = InputValues("", [i])
                expected_output_list.append(i + 1)
            task = Task("Par_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output_list = parallel("", task_array, input_array)

        self.assertEqual(expected_output_list, output_list)


    # Tests for SPLIT Template using PREVIOUS
    def test_split_no_prev(self):
        """Test tasks without PREVIOUS"""

        split_task_types = InputTypes("", [int])
        split_task_values = InputValues("", [1])
        split_task = Task("Split Task", FUNCTION, lambda x: x + 1, split_task_types, None)

        task_list, input_list, expected_output_list = [], [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)
            expected_output_list.append(i + 1)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output_list = split("", split_task, split_task_values, task_array, input_array)

        # don't assert the order just the values
        self.assertEqual(set(expected_output_list), set(output_list))

    def test_split_prev_no_inputs_split(self):
        """Test tasks with no PREVIOUS class on split task"""

        split_task_types = InputTypes("", [])
        split_task_values = InputValues("", [])
        split_task = Task("Split Task", FUNCTION, lambda: 1, split_task_types, None)

        task_list, input_list, expected_output_list = [], [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)
            expected_output_list.append(i + 1)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output = split( "", split_task, split_task_values, task_array, input_array)

        self.assertEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], output)

    def test_split_prev_implicit_split(self):
        """Test tasks with erroneous implicit PREVIOUS on split task"""

        split_task_types = InputTypes("", [int])
        split_task = Task("Split Task", FUNCTION, lambda x: x + 1, split_task_types, None)

        task_list, input_list, expected_output_list = [], [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)
            expected_output_list.append(i + 1)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        self.assertRaisesRegexp(ValueError, "previous", split, "", split_task, None, task_array, input_array)

    def test_split_prev_class_split(self):
        """Test tasks with erroneous PREVIOUS class on split task"""

        split_task_types = InputTypes("", [int])
        split_task_values = InputValues("", [PREVIOUS])
        split_task = Task("Split Task", FUNCTION, lambda x: x + 1, split_task_types)

        task_list, input_list, expected_output_list = [], [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types)
            task_list.append(task)
            input_list.append(task_values)
            expected_output_list.append(i + 1)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        self.assertRaisesRegexp(ValueError, "previous", split, "", split_task, split_task_values, task_array, input_array)

    def test_split_prev_instance_i_n_split(self):
        """Test tasks with erroneous PREVIOUS.i instance (with index, without source task) on split task"""

        split_task_types = InputTypes("", [int])
        split_task_values = InputValues("", [PREVIOUS.i[1]])
        split_task = Task("Split Task", FUNCTION, lambda x: x + 1, split_task_types, None)

        task_list, input_list, expected_output_list = [], [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)
            expected_output_list.append(i + 1)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        self.assertRaisesRegexp(ValueError, "previous", split, "", split_task, split_task_values, task_array, input_array)

    def test_split_prev_instance_task_split(self):
        """Test tasks with PREVIOUS instance (without index, with source task) on split task"""

        # Sequence tasks/template
        task_seq_types = InputTypes("", [int])
        task_seq_values = InputValues("", [1])
        task_seq = Task("Par First Task", FUNCTION, lambda x: x + 1, task_seq_types, None)

        task_array = TaskArray("", [task_seq, ])
        input_array = InputArray("", [task_seq_values, ])

        output = sequence("", task_array, input_array)

        self.assertEqual(2, output)

        split_task_types = InputTypes("", [int])
        split_task_values = InputValues("", [PREVIOUS.task_seq])
        split_task = Task("Split Task", FUNCTION, lambda x: x + 1, split_task_types, None)

        task_list, input_list, expected_output_list = [], [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)
            expected_output_list.append(i + 1)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output_list = split("", split_task, split_task_values, task_array, input_array)

        self.assertEqual(set(expected_output_list), set(output_list))

    def test_split_prev_instance_i_n_task_split(self):
        """Test tasks with PREVIOUS instance (with index, with source task) on split task"""

        # Sequence tasks/template
        task_seq_types = InputTypes("", [int])
        task_seq_values = InputValues("", [1])
        task_seq = Task("Par First Task", FUNCTION, lambda x: (x, x + 1), task_seq_types, None)

        task_array = TaskArray("", [task_seq, ])
        input_array = InputArray("", [task_seq_values, ])

        output = sequence("", task_array, input_array)

        self.assertEqual((1, 2), output)

        split_task_types = InputTypes("", [int])
        split_task_values = InputValues("", [PREVIOUS.task_seq.i[1]])
        split_task = Task("Split Task", FUNCTION, lambda x: x + 1, split_task_types, None)

        task_list, input_list, expected_output_list = [], [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)
            expected_output_list.append(i + 1)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output_list = split("", split_task, split_task_values, task_array, input_array)

        self.assertEqual(set(expected_output_list), set(output_list))

    def test_split_prev_class_array(self):
        """Test tasks with PREVIOUS class on tasks from array"""

        split_task_types = InputTypes("", [int])
        split_task_values = InputValues("", [1])
        split_task = Task("Split Task", FUNCTION, lambda x: x + 1, split_task_types, None)

        task_list, input_list, expected_output_list = [], [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            if i % 2 == 0:
                task_values = InputValues("", [PREVIOUS])
                expected_output_list.append(3)
            else:
                task_values = InputValues("", [i])
                expected_output_list.append(i + 1)
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output_list = split("", split_task, split_task_values, task_array, input_array)

        self.assertEqual(set(expected_output_list), set(output_list))

    def test_split_prev_instance_i_n_array(self):
        """Test tasks with PREVIOUS.i[n] instance (with index, without source task) on tasks from array"""

        split_task_types = InputTypes("", [int])
        split_task_values = InputValues("", [1])
        split_task = Task("Split Task", FUNCTION, lambda x: (x, x + 1), split_task_types, None)

        task_list, input_list, expected_output_list = [], [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            if i % 2 == 0:
                task_values = InputValues("", [PREVIOUS.i[1]])
                expected_output_list.append(3)
            else:
                task_values = InputValues("", [i])
                expected_output_list.append(i + 1)
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output_list = split("", split_task, split_task_values, task_array, input_array)

        self.assertEqual(set(expected_output_list), set(output_list))

    def test_split_prev_instance_task_array(self):
        """Test tasks with PREVIOUS instance (without index, with source task) on tasks from array"""

        # Sequence tasks/template
        task_seq_types = InputTypes("", [int])
        task_seq_values = InputValues("", [1])
        task_seq = Task("Par First Task", FUNCTION, lambda x: x + 1, task_seq_types, None)

        task_array = TaskArray("", [task_seq, ])
        input_array = InputArray("", [task_seq_values, ])

        output = sequence("", task_array, input_array)

        self.assertEqual(2, output)

        split_task_types = InputTypes("", [int])
        split_task_values = InputValues("", [1])
        split_task = Task("Split Task", FUNCTION, lambda x: (x, x + 1), split_task_types, None)

        task_list, input_list, expected_output_list = [], [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            if i % 2 == 0:
                task_values = InputValues("", [PREVIOUS.task_seq])
                expected_output_list.append(3)
            else:
                task_values = InputValues("", [i])
                expected_output_list.append(i + 1)
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output_list = split("", split_task, split_task_values, task_array, input_array)

        self.assertEqual(set(expected_output_list), set(output_list))

    def test_split_prev_instance_task_i_n_array(self):
        """Test tasks with PREVIOUS.i instance (with index, with source task) on tasks from array"""

        # Sequence tasks/template
        task_seq_types = InputTypes("", [int])
        task_seq_values = InputValues("", [1])
        task_seq = Task("Par First Task", FUNCTION, lambda x: (x, x + 1), task_seq_types, None)

        task_array = TaskArray("", [task_seq, ])
        input_array = InputArray("", [task_seq_values, ])

        output = sequence("", task_array, input_array)

        self.assertEqual((1, 2), output)

        split_task_types = InputTypes("", [int])
        split_task_values = InputValues("", [1])
        split_task = Task("Split Task", FUNCTION, lambda x: (x, x + 1), split_task_types, None)

        task_list, input_list, expected_output_list = [], [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            if i % 2 == 0:
                task_values = InputValues("", [PREVIOUS.task_seq.i[1]])
                expected_output_list.append(3)
            else:
                task_values = InputValues("", [i])
                expected_output_list.append(i + 1)
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        output_list = split("", split_task, split_task_values, task_array, input_array)

        self.assertEqual(set(expected_output_list), set(output_list))

    # Tests for Merge Template using PREVIOUS
    def test_merge_no_prev(self):
        """Test tasks without PREVIOUS"""

        task_list, input_list = [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        merge_task_types = InputTypes("", [int])
        merge_task_values = InputValues("", [[1, 2]])
        merge_task = Task("Merge Task", FUNCTION, lambda x: sum(x) + 1, merge_task_types, None)

        output = merge("", task_array, input_array, merge_task, merge_task_values)

        self.assertEqual(4, output)

    def test_merge_prev_class_merge(self):
        """Test tasks with PREVIOUS class for Merge Task"""

        task_list, input_list = [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        merge_task_types = InputTypes("", [list])
        merge_task_values = InputValues("", [PREVIOUS])
        merge_task = Task("Merge Task", FUNCTION, lambda x: sum(x), merge_task_types, None)

        output = merge("", task_array, input_array, merge_task, merge_task_values)

        self.assertEqual(55, output)

    def test_merge_missing_parallel_task_error(self):
        """Test tasks with no inputs and implicit PREVIOUS merge inputs """

        task_list, input_list = [], []
        for i in range(10):
            task = Task("Merge_{}".format(i), FUNCTION, lambda x: x+1, None)
            task_list.append(task)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        merge_task_types = InputTypes("", [list])
        merge_task = Task("Merge Task", FUNCTION, lambda x: sum(x), merge_task_types, None)

        self.assertRaisesRegexp(ValueError,  "missing PREVIOUS parallel task", merge, "test_merge_implicit_prev_error", task_array, input_array, merge_task, input_list)

    def test_merge_no_inputs_merge_implicit_previous(self):
        """Test tasks with no inputs and implicit PREVIOUS merge inputs """

        task_list, input_list = [], []
        for i in range(10):
            task_types = InputTypes("", [])
            task = Task("Merge_{}".format(i), FUNCTION, lambda: 1, task_types, None)
            task_list.append(task)
            input_list.append([])

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        merge_task_types = InputTypes("", [list])
        merge_task = Task("Merge Task", FUNCTION, lambda x: sum(x), merge_task_types, None)

        output = merge("test_merge_no_inputs_merge_implicit_previous", task_array, input_array, merge_task, None)

        self.assertEqual(10, output)

    def test_merge_prev_instance_merge(self):
        """Test tasks with PREVIOUS instance for Merge Task (no Task, no index)"""

        task_list, input_list = [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        merge_task_types = InputTypes("", [list])
        merge_task_values = InputValues("", [PREVIOUS])
        merge_task = Task("Merge Task", FUNCTION, lambda x: sum(x), merge_task_types, None)

        output = merge("", task_array, input_array, merge_task, merge_task_values)

        self.assertEqual(55, output)

    def test_merge_prev_instance_merge_i_n(self):
        """Test tasks with PREVIOUS.i instance for Merge Task (no Task, with index)"""

        task_list, input_list = [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        merge_task_types = InputTypes("", [list])
        merge_task_values = InputValues("", [PREVIOUS.i[0]])
        merge_task = Task("Merge Task", FUNCTION, lambda x: x + 1, merge_task_types, None)

        output = merge("", task_array, input_array, merge_task, merge_task_values)

        self.assertEqual(2, output)

    def test_merge_prev_instance_merge_task_by_name(self):
        """Test tasks with PREVIOUS instance for Merge Task (with Task, no index)"""

        task_list, input_list = [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        merge_task_types = InputTypes("", [list])
        merge_task_values = InputValues("", [PREVIOUS.Split_9])
        merge_task = Task("Merge Task", FUNCTION, lambda x: x + 1, merge_task_types, None)

        output = merge("", task_array, input_array, merge_task, merge_task_values)
        self.assertEqual(11, output)

    def test_merge_prev_instance_merge_task_by_variable(self):
        """Test tasks with PREVIOUS instance for Merge Task (with Task, no index)"""

        task_list, input_list = [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Split_{}".format(i), FUNCTION, lambda x: x + 1, task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        merge_task_types = InputTypes("", [list])
        merge_task_values = InputValues("", [PREVIOUS.task])
        merge_task = Task("Merge Task", FUNCTION, lambda x: x + 1, merge_task_types, None)

        output = merge("", task_array, input_array, merge_task, merge_task_values)
        self.assertEqual(11, output)

    def test_merge_prev_instance_merge_task_i_n(self):
        """Test tasks with PREVIOUS.i instance for Merge Task (with Task, with index)"""

        task_list, input_list = [], []
        for i in range(10):
            task_types = InputTypes("", [int])
            task_values = InputValues("", [i])
            task = Task("Split_{}".format(i), FUNCTION, lambda x: (x, x + 1), task_types, None)
            task_list.append(task)
            input_list.append(task_values)

        task_array = TaskArray("", task_list)
        input_array = InputArray("", input_list)

        merge_task_types = InputTypes("", [list])
        merge_task_values = InputValues("", [PREVIOUS.task.i[1]])
        merge_task = Task("Merge Task", FUNCTION, lambda x: x + 1, merge_task_types, None)

        output = merge("", task_array, input_array, merge_task, merge_task_values)

        self.assertEqual(11, output)


if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.test_previous_single']
    unittest.main()
