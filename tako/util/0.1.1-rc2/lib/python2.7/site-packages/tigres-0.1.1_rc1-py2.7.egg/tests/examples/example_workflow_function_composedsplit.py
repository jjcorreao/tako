import sys
from tigres import *

# Initial inputs to the workflow
from tigres.utils import Execution


input1_task1 = 'hello'


# Following functions are given 
def task1impl(text):
    textArray = [text, text, text]
    return textArray


def task2impl(text):
    print("Here")
    return text[::-1]


def main(execution):
    # This example tests reuse of arrays across different workflows

    start(name="example_workflow_function_composedsplit", log_dest='example_workflow_function_composedsplit.log',
          execution=execution)

    # Define input types for Task1
    task1_types = InputTypes("Task1types", [str])
    # Define Task 1
    task1 = Task("Task1", FUNCTION, task1impl, task1_types, None)
    # Assign inputs for task1
    task1_values = InputValues("Input Task1", [input1_task1])

    # Create a task array containing task1 and task2
    task_array_seq = TaskArray("sequence tasks12", [task1])

    # Create a data array with task1 and task2's input values

    input_array_seq = InputArray("sequence data12", [task1_values])

    # Invoke the template
    output_seq = sequence("my seq", task_array_seq, input_array_seq)

    print("Sequence Output: \n")
    print(output_seq)


    # Similarly, define input types and task for task2
    task2_types = InputTypes("Task2types", [str])
    task2 = Task("Task2", FUNCTION, task2impl, task2_types, None)

    # NOTE: Need to figure this out
    task2_values = InputValues("Input Task2", [PREVIOUS.i])

    # Create a task array containing task1 and task2
    task_array_parallel = TaskArray("parallel tasks12", [task2])

    # Create a data array with task1 and task2's input values

    input_array_parallel = InputArray("parallel data12", [task2_values])

    output_parallel = parallel("my parallel", task_array_parallel, input_array_parallel)

    print("Parallel Output: \n")
    print(output_parallel)

    dot_execution()


if __name__ == "__main__":

    if len(sys.argv) <= 1:
        print(("Usage: {} ({})>".format(sys.argv[0], "|".join(list(Execution.LOOKUP.keys())))))
        exit()
    main(Execution.get(sys.argv[1]))
